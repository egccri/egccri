name: CI
on:
  push:
    branches: [main]
    tags-ignore: [dev]
    paths-ignore:
      - 'meetings/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'meetings/**'
defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build egccri
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: x86_64-linux
            os: ubuntu-latest
          - build: x86_64-macos
            os: macos-latest
          - build: x86_64-windows
            os: windows-latest
          - build: x86_64-mingw
            os: windows-latest
            target: x86_64-pc-windows-gnu
          - build: aarch64-linux
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
          - build: s390x-linux
            os: ubuntu-latest
            target: s390x-unknown-linux-gnu
            gcc_package: gcc-s390x-linux-gnu
            gcc: s390x-linux-gnu-gcc
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: ./.github/actions/install-rust
      - uses: ./.github/actions/binary-compatible-builds
        if: matrix.target == ''

      - name: Install cross-compilation tools
        run: |
          set -ex
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.gcc_package }}
          upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
          echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.gcc }} >> $GITHUB_ENV
        if: matrix.target != '' && matrix.os == 'ubuntu-latest'
      - run: |
          echo CARGO_BUILD_TARGET=${{ matrix.target }} >> $GITHUB_ENV
          rustup target add ${{ matrix.target }}
        if: matrix.target != ''
      # Build `wasmtime` and executables
      - run: $CENTOS cargo build --release --bin wasmtime

      # Build `libwasmtime.so`
      - run: $CENTOS cargo build --release --manifest-path crates/c-api/Cargo.toml

      # Assemble release artifats appropriate for this platform, then upload them
      # unconditionally to this workflow's files so we have a copy of them.
      - run: ./ci/build-tarballs.sh "${{ matrix.build }}" "${{ matrix.target }}"
      - uses: actions/upload-artifact@v1
        with:
          name: bins-${{ matrix.build }}
          path: dist

      # ... and if this was an actual push (tag or `main`) then we publish a
      # new release. This'll automatically publish a tag release or update `dev`
      # with this `sha`
      - run: cd .github/actions/github-release && npm install --production
      - name: Publish Release
        uses: ./.github/actions/github-release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        with:
          files: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}